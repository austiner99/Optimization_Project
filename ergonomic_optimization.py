import numpy as np
from scipy.optimize import minimize

def string_to_index_optimized(string):
    # Vectorized approach for string-to-index conversion
    string = string.lower().replace(" ", "")
    char_map = {chr(i + 97): i for i in range(26)}
    char_map.update({'.': 26, ',': 27, '?': 28, "'": 29})
    return np.array([char_map.get(char, -1) for char in string])
    
def arc_eq(x, r):
    d = 2.5 # Distance from the center of the arc to the chord
    # Generate arc points based on b and c
    return -np.sqrt(r**2-d**2)+np.sqrt(r**2-x**2) # Arc equation


def arc_leng_eq(arc):
    arc_length = np.zeros(len(arc))
    for i in range(1, len(arc)):
        arc_length[i] = np.linalg.norm(arc[i] - arc[i-1])
    return np.sum(arc_length)

def find_x_y(arc, length):
    total_length = 0
    for i in range(1, len(arc)):
        segment_length = np.linalg.norm(arc[i] - arc[i-1])
        total_length += segment_length
        if total_length >= length:
            position = arc[i]
            return position  # Return the index value as well
    print('No such index found')
    return None # Return -1 if no such index is found

def place_keys(arc1, arc2, arc3, i):
    positions = np.zeros((30, 3))
    for j in range(30):
        if j < 8:
            idx = j * 2 + 1
            positions[j] = 0.25 * (arc2[idx] - arc1[idx]) + arc1[idx]
        elif j < 16:
            idx = (j - 8) * 2 + 1
            positions[j] = 0.75 * (arc2[idx] - arc1[idx]) + arc1[idx]
        elif j < 24:
            idx = (j - 16) * 2 + 1
            positions[j] = 0.25 * (arc3[idx] - arc2[idx]) + arc2[idx]
        else:
            idx = (j - 24) * 2 + 5
            positions[j] = 0.75 * (arc3[idx] - arc2[idx]) + arc2[idx]
    key_index = np.array([26, 5, 15, 1, 21, 9, 16, 28, 7, 20, 19, 3, 11, 13, 14, 8, 27, 10, 6, 2, 17, 18, 0, 4, 23, 25, 12, 22, 29, 24])
    keys = np.zeros((30, 4))
    for j in range(30):
        keys[j][0] = key_index[j]
        keys[j][1:4] = positions[j]
    return keys
    
def erg_objective_function_optimized(r, string_index):
    
    # generate arc from b and c
    
    x_values = np.linspace(-2.5, 2.5, 10000)
    arc1 = np.zeros((len(x_values), 2))
    arc2 = np.zeros((len(x_values), 2))
    arc3 = np.zeros((len(x_values), 2))
    arc1[:, 0] = x_values  # Set the first column of arc to the values in x_values
    arc2[:, 0] = x_values
    arc3[:, 0] = x_values
    for i in range(len(r)):
        arc1[i][1] = arc_eq(arc1[i][0],r[0])
        arc2[i][1] = arc_eq(arc2[i][0],r[1])
        arc3[i][1] = arc_eq(arc3[i][0],r[2])
    arc1_length = arc_leng_eq(arc1)
    arc2_length = arc_leng_eq(arc2)
    arc3_length = arc_leng_eq(arc3)
    key_x_positions = np.zeros((8, 2))
    finger_x_positions = np.zeros((4, 2))
    
    length_segmant1 = arc1_length / 16
    length_segmant2 = arc2_length / 16
    length_segmant3 = arc3_length / 16
    
    arc1_positions = np.zeros((16, 2))
    arc2_positions = np.zeros((16, 2))
    arc3_positions = np.zeros((16, 2))
    for i in range(16):
        arc1_positions[i] = find_x_y(arc1, length_segmant1*i)
        arc1_positions[i][1] = arc_eq(arc1_positions[i][0], r[0])
        arc2_positions[i] = find_x_y(arc2, length_segmant2*i)
        arc2_positions[i][1] = arc_eq(arc2_positions[i][0], r[1])
        arc3_positions[i] = find_x_y(arc3, length_segmant3*i) 
        arc3_positions[i][1] = arc_eq(arc3_positions[i][0], r[2]) 
    
    #add a z direction to the arc positions, z position will be 0 for arc 1, 2 for arc 2 and 4 for arc 3
    arc1_positions = np.hstack((arc1_positions, np.zeros((16, 1))))
    arc2_positions = np.hstack((arc2_positions, np.ones((16, 1))*2))
    arc3_positions = np.hstack((arc3_positions, np.ones((16, 1))*4))
    
    # function here to calculate key positions (assuming 8 rows of keys split evenly accross the arc generated by b and c)
    # key positions are a percentage betwen arc1 and arc2 and arc3 and arc 4
    keys = place_keys(arc1_positions, arc2_positions, arc3_positions, i) # this creates a 30x4 array with the key index and the x, y, z positions of the keys
    # for example, key 26 (period) is in the bottom left position, as shown in row 0, columns 1, 2, 3, column 0 denotes it as the period key
    
    home_positions = np.zeros((4, 3)) # Predefine finger positions
    home_positions[0] = 0.5*(arc2_positions[2]-arc1_positions[2]) + arc1_positions[2]  # Pinky
    home_positions[1] = arc2_positions[6] # ring
    home_positions[2] = arc2_positions[10] # Middle
    home_positions[3] = arc2_positions[14] # index
    # penalties = [0.5, 0, 0, 0]  # Pinky, Ring, Middle, Index penalties
    # same_finger_penalty = 0.5
    
    # Initialize counters
    # finger_counts = [0, 0, 0, 0, 0]  # Pinky, Ring, Middle, Index, Same Finger
    score = 0
    
    prev_active_finger = -1
    prev_finger_position = np.inf
    saved_distances = []
    for key in string_index:
        for i in range(30):
            if keys[i][0] == key:
                index = i
                break
        # key_indices = np.where(keys[:, 0] == key)[0]  # Find the index of the key in the keys array
        next_finger_position = keys[index, 1:4]  # Get the position of the key
        
        key_index = index
        if key_index in [0, 1, 8, 9, 16, 17]:
            next_active_finger = 0
        elif key_index in [2, 3, 10, 11, 18, 19, 24, 25]:
            next_active_finger = 1
        elif key_index in [4, 5, 12, 13, 20, 21, 26, 27]:
            next_active_finger = 2
        elif key_index in [6, 7, 14, 15, 22, 23, 28, 29]:
            next_active_finger = 3
            
        # Apply penalties
        # active_finger_penalty = penalties[next_active_finger]
        # finger_counts[next_active_finger] += 1
        
        # Same finger penalty logic
        # if prev_active_finger == next_active_finger:
        #     finger_counts[-1] += 1
        #     same_finger_penalty_value = same_finger_penalty
        # else:
        #     same_finger_penalty_value = 0

        # Calculate distance
        current_finger_position = home_positions[next_active_finger] if prev_active_finger != next_active_finger else prev_finger_position
        distance = np.linalg.norm(next_finger_position - current_finger_position)
        saved_distances.append(distance)
        # Update score
        score += distance # + active_finger_penalty + same_finger_penalty_value
        
        # Update previous finger position and active finger
        prev_active_finger = next_active_finger
        prev_finger_position = next_finger_position
    # print('average distance:', np.mean(saved_distances))
    
    # print("Score:", score)
    return score #, finger_counts

string = "The sun's warm glow fell across the field. A breeze stirred, rustling leaves as birds chirped. The dog's bark echoed while a cat lounged nearby. People walked along quiet paths, sharing thoughts. What joy exists in moments like these? Clouds drifted above, shadows shifting below. Foxes dashed through the brush. Time's passage often feels swift. Yet, laughter lingers. Jars of jam lined the shelf. Vivid quilts hung, displaying vibrant hues. Zebras grazed in far-off lands. Quirky scenes unfold daily. Few question why. Life's charm, both simple and profound, remains constant. Is there anything more precious than this? \" \
    Children played along the park's edge, their laughter mingling with the breeze. Ducks glided across the pond, ripples trailing behind. Tall trees stood in silent watch, their branches swaying softly. Nearby, a gardener tended flowers, carefully pruning each stem. The air smelled of fresh earth and blooming petals. Squirrels scampered up tree trunks, their tails flicking in delight. Nature thrived, unburdened by time's relentless march. \
    A man with a weathered hat sat upon a bench, his hands clasped together. His eyes traced the flight of a passing bird. What memories lingered within his thoughts? Each wrinkle on his face told a story, shaped by years of joy and sorrow. A nearby jogger passed, earbuds in, oblivious to the world around her. Life continued, ever in motion. \
    By the water's edge, a family spread a picnic blanket. Sandwiches, fruit, and lemonade filled their basket. The youngest child giggled as she chased a butterfly. The parents watched with gentle smiles, savoring the fleeting moments of innocence. Sunlight dappled the ground, illuminating patches of vibrant green. A dragonfly hovered above the reeds, its wings glinting. \
    In the distance, an old farmhouse stood, its red paint peeling. Wooden shutters, once bright, now bore the marks of age. The wind stirred the tall grass, sending waves across the golden field. A black cat perched on the porch, eyes gleaming. Beside the barn, rusted tools lay abandoned. Yet, even in neglect, beauty endured. \
    A narrow dirt road wound through the countryside. Along its path, wildflowers bloomed in bursts of yellow and purple. Cows grazed lazily, tails flicking away flies. A lone cyclist pedaled past, the hum of tires blending with the chirp of crickets. Overhead, a hawk soared, scanning the ground below. \
    Night approached, and the sky deepened to indigo. Stars blinked into existence, scattered like gems. A crescent moon hung low, casting silver light. In a small town nearby, streetlamps flickered on. Porch lights glowed warmly, welcoming home weary travelers. Laughter spilled from an open window, the sound of a family gathered for dinner. \
    A couple strolled hand in hand, their steps in perfect rhythm. They paused beneath a lamppost, its glow casting a halo around them. The man whispered something, drawing a soft laugh from his companion. Shadows danced along the pavement. Above them, the stars watched in silent approval. \
    Time passed, as it always does. Seasons changed, painting the world in hues of gold, crimson, and green. Children grew, their laughter echoing through the years. Leaves fell, carpeting the ground in a crunchy mosaic. Snow blanketed rooftops, muffling the world in a quiet embrace. Yet, the cycle continued. \
    In spring, blossoms burst forth, coloring branches with pink and white. Bees buzzed, drawn to the sweet nectar. Farmers tilled the soil, their hands darkened with earth. Rain fell in gentle showers, nourishing the eager roots. Frogs croaked from hidden ponds. Life thrived. \
    Summer brought long days of warmth. Fields of wheat swayed under the sun's golden gaze. Children dashed through sprinklers, squealing with delight. Ice cream dripped from cones, melting faster than it could be licked. Fireflies blinked in the twilight, their glow like tiny stars. Laughter echoed from backyard gatherings. \
    Autumn arrived with a crisp breeze. Leaves turned brilliant shades of amber and scarlet. Pumpkins dotted fields, their orange shells gleaming. Families wandered through corn mazes, laughter guiding their way. Bonfires crackled, sending sparks skyward. The scent of cinnamon and apple cider lingered in the air. \
    Winter followed, wrapping the world in icy stillness. Frost traced delicate patterns upon windowpanes. Children built snowmen, their mittens damp with melted snow. Smoke curled from chimneys, mingling with the cold air. The ground glittered beneath the moonlight, each snowflake unique. Silence reigned, broken only by the crunch of boots upon snow. \
    Yet, through every season, life endured. The fox still leaped, the dog barked, and the cat purred. People gathered, shared stories, and held one another close. Time moved forward, but memories remained. And in those memories, joy blossomed. \
    A robin sang at dawn, its cheerful notes welcoming the sun. Dew clung to blades of grass, shimmering like jewels. A farmer's rooster crowed, greeting the day with pride. Somewhere, a child stirred beneath warm blankets, dreaming of distant adventures. \
    The ocean's waves crashed against the shore, sending salty mist into the air. Gulls circled above, their cries mingling with the breeze. A lighthouse stood tall, its beam sweeping across the darkened waters. Sailboats bobbed in the harbor, their sails furled. \
    Farther inland, mountains rose, their peaks kissed by clouds. Pine trees lined the slopes, their needles dusted with snow. Hikers paused to admire the view, their breath visible in the thin air. A hawk soared, its sharp eyes scanning the forest below. \
    In bustling cities, people hurried along crowded sidewalks. Taxi horns blared, and street vendors called to passing customers. Neon signs flickered, illuminating the night. Yet, even amidst the chaos, beauty lingered. Musicians played on street corners, their melodies weaving through the urban hum. \
    In quieter towns, church bells rang, their chimes echoing across the valley. Children rode bicycles along winding paths. Farmers tended their fields, the scent of fresh hay filling the air. Life moved at a gentler pace. \
    As twilight fell, the sky blazed with hues of pink and orange. Couples sat on porches, watching the day's end. Fireflies emerged, their soft glow dancing in the dark. Stars appeared, each one a reminder of the vastness beyond. \
    The world whispered its stories to those who listened. From the rustle of leaves to the crash of waves, every sound held meaning. Even the silence spoke, offering solace to those who sought it. \
    So, as time marches on, may we pause to savor the moments that remain. The laughter of loved ones, the warmth of the sun, the simple joy of a breeze through the trees. For in these fleeting instants, life's beauty endures. \
    And perhaps, that is enough. \
    "
    
# string = ". f h u , k"

r_front = 5.0
r_back = 3.5
r_mid = 5.0
r_front_max = 7.25
r_front_min = 5.15
r_back_max = 4.65
r_back_min = 3.95
r_mid_max = 6.15
r_mid_min = 4.45


r = np.array([r_front, r_mid, r_back])
string_index = string_to_index_optimized(string)

score = erg_objective_function_optimized(r, string_index)


# Define the bounds for the optimization
bounds = [(r_front_min, r_front_max), (r_mid_min, r_mid_max), (r_back_min, r_back_max)]
# Initial guess
initial_guess = [r_front, r_mid, r_back]
# Perform the optimization
result = minimize(erg_objective_function_optimized, initial_guess, args=(string_index,), bounds=bounds, method='L-BFGS-B')
print("Optimized Parameters:", result.x)
print("Optimized Score:", result.fun)
print(result)